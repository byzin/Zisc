/*!
  \file zisc_config-inl.hpp
  \author Sho Ikeda
  \brief No brief description

  \details
  No detailed description.

  \copyright
  Copyright (c) 2015-2023 Sho Ikeda
  This software is released under the MIT License.
  http://opensource.org/licenses/mit-license.php
  */

#ifndef ZISC_CONFIG_INL_HPP
#define ZISC_CONFIG_INL_HPP

// Standard C++ library
#include <bit>
#include <cstdint>
#include <string_view>

// Zisc
#include "zisc/zisc_config.hpp"

namespace zisc {

static_assert(sizeof(int8b) == 1, "The size of int8b isn't 1 byte.");
static_assert(sizeof(int16b) == 2, "The size of int16b isn't 2 bytes.");
static_assert(sizeof(int32b) == 4, "The size of int32b isn't 4 bytes.");
static_assert(sizeof(int64b) == 8, "The size of int64b isn't 8 bytes.");
static_assert(sizeof(uint8b) == 1, "The size of uint8b isn't 1 byte.");
static_assert(sizeof(uint16b) == 2, "The size of uint16b isn't 2 bytes.");
static_assert(sizeof(uint32b) == 4, "The size of uint32b isn't 4 bytes.");
static_assert(sizeof(uint64b) == 8, "The size of uint64b isn't 8 bytes.");

/*!
  \details No detailed description

  \return No description
  */
inline
constexpr auto Config::architecture() noexcept -> Architecture
{
  Architecture arch = Architecture::kUnknown;
  const std::string_view name = architectureName();
  if (name == architectureName(Architecture::kAmd64V1))
    arch = Architecture::kAmd64V1;
  else if (name == architectureName(Architecture::kAmd64V2))
    arch = Architecture::kAmd64V2;
  else if (name == architectureName(Architecture::kAmd64V3))
    arch = Architecture::kAmd64V3;
  else if (name == architectureName(Architecture::kAmd64V4))
    arch = Architecture::kAmd64V4;
  return arch;
}

/*!
  \details No detailed description

  \param [in] arch No description.
  \return No description
  */
inline
constexpr auto Config::architectureName(const Architecture arch) noexcept -> std::string_view
{
  using namespace std::literals;
  switch (arch) {
   case Architecture::kAmd64V1:
    return "Amd64-v1"sv;
   case Architecture::kAmd64V2:
    return "Amd64-v2"sv;
   case Architecture::kAmd64V3:
    return "Amd64-v3"sv;
   case Architecture::kAmd64V4:
    return "Amd64-v4"sv;
   case Architecture::kUnknown:
    [[fallthrough]];
   default:
    return "Unknown"sv;
  }
}

/*!
  \details No detailed description

  \return No description
  */
inline
constexpr auto Config::architectureName() noexcept -> std::string_view
{
  constexpr std::string_view name{ZISC_ARCHITECTURE_NAME};
  constexpr bool is_valid = (name == architectureName(Architecture::kAmd64V1)) ||
                            (name == architectureName(Architecture::kAmd64V2)) ||
                            (name == architectureName(Architecture::kAmd64V3)) ||
                            (name == architectureName(Architecture::kAmd64V4));
  static_assert(is_valid, "Unsupported architecture: " ZISC_ARCHITECTURE_NAME ".");
  return name;
}

/*!
  \details No detailed description

  \return No description
  */
inline
constexpr auto Config::versionMajor() noexcept -> int
{
  return @PROJECT_VERSION_MAJOR@;
}

/*!
  \details No detailed description

  \return No description
  */
inline
constexpr auto Config::versionMinor() noexcept -> int
{
  return @PROJECT_VERSION_MINOR@;
}

/*!
  \details No detailed description

  \return No description
  */
inline
constexpr auto Config::versionPatch() noexcept -> int
{
  return @PROJECT_VERSION_PATCH@;
}

/*!
  \details No detailed description

  \return No description
  */
inline
constexpr auto Config::versionString() noexcept -> std::string_view
{
  constexpr auto version_str = "@PROJECT_VERSION@";
  const std::string_view version{version_str};
  return version;
}

/*!
  \details No detailed description

  \return No description
  */
inline
constexpr auto Config::l1CacheLineSize() noexcept -> std::size_t
{
  constexpr std::size_t s = @ZISC_L1_CACHE_LINE_SIZE@;
  static_assert(std::has_single_bit(s), "The cache line size isn't power of 2.");
  return s;
}

/*!
  \details No detailed description

  \return No description
  */
inline
constexpr auto Config::isAtomicOsSpecifiedWaitUsed() noexcept -> bool
{
#if defined(ZISC_ATOMIC_OS_SPECIFIED_WAIT)
  const bool flag = true;
#else // ZISC_ATOMIC_OS_SPECIFIED_WAIT
  const bool flag = false;
#endif // ZISC_ATOMIC_OS_SPECIFIED_WAIT
  return flag;
}

} // namespace zisc

#endif // ZISC_CONFIG_INL_HPP
